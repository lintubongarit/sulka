/**
 * Status bar and loader animation and handling.
 */
sulka.statusBar = function (statusBar) {
/**
 * Sets the user-visible status bar error text to a given value, 
 * or removes the text if a false-like value is given.
 * @param errorMsg New error string.
 */
function setStatusError(errorMsg) {
	if (errorMsg) {
		if (errorMsg.length > 500) {
			errorMsg = errorMsg.substring(0, 500) + "...";
		} 
		$("#row-status-error").text(errorMsg);
	} else {
		$("#row-status-error").text("");
	}
}

/**
 * Removes user-visible status bar error text, if any. 
 */
function clearStatusError() {
	setStatusError(false);
}

/**
 * Sets the user-visible status bar informational text to a given value, 
 * or removes the text if a false-like value is given.
 * @param infoMsg New info string.
 */
function setStatusInfo(infoMsg) {
	if (infoMsg) {
		if (infoMsg.length > 500) {
			infoMsg = infoMsg.substring(0, 500) + "...";
		} 
		$("#row-status-info").text(infoMsg);
	} else {
		$("#row-status-info").text("");
	}
}

/**
 * Removes user-visible status bar informational text, if any. 
 */
function clearStatusInfo() {
	setStatusInfo(false);
}

/**
 * The jQuery closure passed that is actively being hovered on, or null 
 * if there currently is no active hover. 
 */
var hoverJq = null;

/**
 * Extend jQuery with method to attach a mouse hover status bar info message to
 * any jQuery closure.
 * @param hint The contextual info message string to show in status bar on hover. 
 */
$.fn.extend({
	hoverHint: function (hint) {
		var thisJq = this;
		this.hover(
			function () {
				hoverJq = thisJq;
				statusBar.setMouseOverHint(hint);
			},
			function () {
				if (hoverJq === thisJq) {
					hoverJq = null;
					statusBar.clearMouseOverHint();
				}
			}
		);
		return this;
	}
});

statusBar = {
	/**
	 * Current errors. The error message precedence (order of importance) is as listed. 
	 */
	currentErrors: {
		// Validation error string from current SlickGrid editor 
		gridValidationError: null,
		// Validation error string that was returned for the currently selected row from the API
		validationServiceError: null,
		// Error message string that was generated by a failed API request or invalid filter field
		loadingError: null
	},
	
	/**
	 * Current informational messages. The message precedence (order of importance) is as listed. 
	 */
	currentInfos: {
		// Keyboard "focus" contextual hint message on eg. editor auto-complete
		keyboardSelectionHint: null,
		// Any contextual hint message generated by mouse hover 
		mouseOverHint: null,
		// Status information about currently selected rows
		selectionInfo: null,
		// Status information about currently visible data set  
		dataInfo: null
	},
	
	/**
	 * Reflect currentErrors to the status bar. 
	 */
	updateStatusBar: function () {
		var currentErrors = statusBar.currentErrors;
		var errorArray = [];
		if (currentErrors.gridValidationError !== null) {
			errorArray.push(currentErrors.gridValidationError);
		}
		if (currentErrors.validationServiceError !== null) {
			errorArray.push(currentErrors.validationServiceError);
		}
		if (currentErrors.loadingError !== null) {
			errorArray.push(currentErrors.loadingError);
		}
		
		var currentInfos = statusBar.currentInfos;
		var infoArray = [];
		if (currentInfos.keyboardSelectionHint !== null) {
			infoArray.push(currentInfos.keyboardSelectionHint);
		}
		if (currentInfos.mouseOverHint !== null) {
			infoArray.push(currentInfos.mouseOverHint);
		}
		if (currentInfos.selectionInfo !== null) {
			infoArray.push(currentInfos.selectionInfo);
		}
		if (currentInfos.dataInfo !== null) {
			infoArray.push(currentInfos.dataInfo);
		}
		
		if (errorArray.length > 0) {
			setStatusError(sulka.strings.joinStatusBarMessages(errorArray));
		} else {
			clearStatusError();
		}
		
		if (infoArray.length > 0) {
			if (errorArray.length > 0) {
				setStatusInfo(" â€“ " + sulka.strings.joinStatusBarMessages(infoArray));
			} else {
				setStatusInfo(sulka.strings.joinStatusBarMessages(infoArray));
			}
		} else {
			clearStatusInfo();
		}
	},
	
	/**
	 * Set the loading error text.
	 * 
	 * @param str New error text, or falsy value to clear error.
	 */
	setLoadingError: function (str) {
		if (str) {
			statusBar.currentErrors.loadingError = str;
		} else {
			statusBar.currentErrors.loadingError = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear loading errors.
	 */
	clearLoadingError: function () {
		statusBar.setLoadingError(false);
	},
	
	/**
	 * Set the validation service error text.
	 * 
	 * @param str New error text, or falsy value to clear error.
	 */
	setValidationServiceError: function (str) {
		if (str) {
			statusBar.currentErrors.validationServiceError = str;
		} else {
			statusBar.currentErrors.validationServiceError = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear validation service errors.
	 */
	clearValidationServiceError: function () {
		statusBar.setValidationServiceError(false);
	},
	
	/**
	 * Set the grid validation error text.
	 * 
	 * @param str New error text, or falsy value to clear error.
	 */
	setGridValidationError: function (str) {
		if (str) {
			statusBar.currentErrors.gridValidationError = str;
		} else {
			statusBar.currentErrors.gridValidationError = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear loading errors.
	 */
	clearGridValidationError: function () {
		statusBar.setGridValidationError(false);
	},
	
	/**
	 * How many calls to showLoader() there has been?
	 */
	loaderCounter: 0,
	
	/**
	 * Show the loader animation. Each caller to this function MUST make sure that
	 * it eventually calls hideLoader() (or calls a function that calls hideLoader) 
	 */
	showLoader: function () {
		statusBar.loaderCounter++;
		$("#loader-animation").show();
	},
	
	/**
	 * Hide the loader animation.
	 */
	hideLoader: function () {
		if (--statusBar.loaderCounter <= 0) {
			if (statusBar.loaderCounter < 0) {
				sulka.helpers.log("hideLoader called without preceding showLoader!");
			}
			$("#loader-animation").hide();
		}
	},
	
	/**
	 * Hide the loader animation and set the error text.
	 */
	hideLoaderAndSetError: function (errorMsg) {
		statusBar.hideLoader();
		statusBar.setLoadingError(errorMsg);
	},
	
	/**
	 * Hide the loader animation and unset the error text.
	 * 
	 * @param errorMsg New error string.
	 */
	hideLoaderAndUnsetError: function () {
		statusBar.hideLoader();
		statusBar.clearLoadingError();
	},
	
	/**
	 * Unset the error text and show the loader animation.
	 * 
	 * @param errorMsg New error string.
	 */
	unsetErrorAndShowLoader: function () {
		statusBar.clearLoadingError();
		statusBar.showLoader();
	},
	
	/**
	 * Set the keyboard selection hint.
	 * 
	 * @param str New hint text, or falsy value to clear hint.
	 */
	setKeyboardSelectionHint: function (str) {
		if (str) {
			statusBar.currentInfos.keyboardSelectionHint = str;
		} else {
			statusBar.currentInfos.keyboardSelectionHint = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear keyboard selection hint.
	 */
	clearKeyboardSelectionHint: function () {
		statusBar.setKeyboardSelectionHint(false);
	},
	
	/**
	 * Set the mouse over hint.
	 * 
	 * @param str New hint text, or falsy value to clear hint.
	 */
	setMouseOverHint: function (str) {
		if (str) {
			statusBar.currentInfos.mouseOverHint = str;
		} else {
			statusBar.currentInfos.mouseOverHint = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear mouse over hint.
	 */
	clearMouseOverHint: function () {
		statusBar.setMouseOverHint(false);
	},
	
	/**
	 * Set the data view info.
	 * 
	 * @param str New info text, or falsy value to clear text.
	 */
	setDataInfo: function (str) {
		if (str) {
			statusBar.currentInfos.dataInfo = str;
		} else {
			statusBar.currentInfos.dataInfo = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear data view info.
	 */
	clearDataInfo: function () {
		statusBar.setDataInfo(false);
	},
	
	/**
	 * Set the info about currently selected rows.
	 * 
	 * @param str New info text, or falsy value to clear text.
	 */
	setSelectionInfo: function (str) {
		if (str) {
			statusBar.currentInfos.selectionInfo = str;
		} else {
			statusBar.currentInfos.selectionInfo = null;
		}
		statusBar.updateStatusBar();
	},
	
	/**
	 * Clear selection info.
	 */
	clearSelectionInfo: function () {
		statusBar.setSelectionInfo(false);
	}
}; return statusBar; }();